#ifndef ORO_CORBA_DATAFLOW_IDL
#define ORO_CORBA_DATAFLOW_IDL

#ifdef CORBA_IS_TAO
//resolves LNK2005
#include <tao/orb.idl>
#endif

module RTT
{
  module corba
  {
    enum CFlowStatus { CNoData, COldData, CNewData };
    enum CConnectionModel { CData, CBuffer };
    enum CLockPolicy { CUnsync, CLocked, CLockFree };
    struct CConnPolicy
    {
        CConnectionModel type;
        boolean init;
        CLockPolicy lock_policy;
        boolean pull;
        long size;
        long transport;
        long data_size;
        string name_id;
    };

    /**
     * Represents the basic channel element interface
     * for reading, writing and disconnecting a channel.
     * Use this interface in case you want to communicate
     * with an Orocos component's port from a non-Orocos application.
     */
    interface CChannelElement
    {
        /**
         * Reads from this Channel Element.
         */
        CFlowStatus read(out any sample, in boolean copy_old_data);
        /**
         * Writes into this Channel Element.
         * @return false if the channel became invalid
         */
        oneway void write(in any sample);
        /**
         * Disconnect and dispose this object.
         * You may no longer use this object after calling this method.
         */
        void disconnect();
    };

    /**
     * The advanced channel element interface, used by Orocos
     * to relay over-CORBA data flow connections.
     */
    interface CRemoteChannelElement : CChannelElement
    {
        /**
         * Used during connection setup to pass on
         * an example of the data.
         * This is done behind the scenes by the connection logic.
         * @note: not implemented yet.
         */
        //boolean setDataSample(in any sample);
        /**
         * Called by the input port to indicate that
         * it's ready to be used.
         * This is done behind the scenes by the connection logic.
         * @note: not implemented yet.
         */
        //boolean inputReady();
        /**
         * Used to inform this channel element which the other
         * side is such that they can relay a signal or disconnect.
         */
        void setRemoteSide(in CRemoteChannelElement other);
        /**
         * Used by the 'remote' side to inform this channel element that new data
         * is available for reading.
         * @return false if this channel became invalidated.
         */
        boolean remoteSignal();

        /**
         * Used by the 'remote' side to inform this channel element
         * that the connection is been cleaned up.
         * @param writer_to_reader Since channel elements are chained,
         * we need to know who initiated the disconnect: starting from
         * the output port (writer_to_reader == true) or from the
         * input port (writer_to_reader == false)
         */
        void remoteDisconnect(in boolean writer_to_reader);

    };

    /** Emitted when information is requested on a port that does not exist */
    exception CNoSuchPortException {};
    /** Emitted during connections, when there is no CORBA transport defined
     * for the data type of the given ports
     */
    exception CNoCorbaTransport {};

    enum CPortType { CInput, COutput };

    struct CPortDescription
    {
        CPortType type;
        string   name;
        string   type_name;
    };

    /**
     * An interface to access the dataflow
     * of a CControlTask object. Data ports are exported as
     * assignable expressions (Set/Get). Buffer ports are
     * exported as buffer channels.
     * @ingroup CompIDL
     */
    interface CDataFlowInterface
    {
      typedef sequence<string> CPortNames;
      typedef sequence<CPortDescription> CPortDescriptions;

      /**
       * Returns the names of the ports of this component.
       */
      CPortNames getPorts();

      /**
       * Returns the names of the ports of this component.
       */
      CPortDescriptions getPortDescriptions();

      /**
       * Returns the type of the given port
       */
      CPortType getPortType(in string port_name)
            raises(CNoSuchPortException);

      /**
       * Returns the data type for the given port
       */
      string getDataType(in string port_name)
            raises(CNoSuchPortException);

      /**
       * Check if the given port is already connected to something
       */
      boolean isConnected(in string port_name)
            raises(CNoSuchPortException);

      /**
       * Disconnects this port from all connections it is part of.
       * @see CChannelElement::disconnect() to disconnect a single Channel.
       */
      void disconnectPort(in string port_name)
            raises(CNoSuchPortException);

      /**
       * Use this to write to an input port with
       * the given policy.
       * Some protocols may adjust the policy, or pass additional information
       * into the policy, such as the name of the newly created connection.
       *
       * The returned channel element will not be functional until
       * channelReady() has been called for it
       */
      CChannelElement buildChannelOutput(in string input_port, inout CConnPolicy policy)
            raises(CNoCorbaTransport,CNoSuchPortException);

      /**
       * Use this to read from an output port with
       * the given policy.
       * Some protocols may adjust the policy, or pass additional information
       * into the policy, such as the name of the newly created connection.
       */
      CChannelElement buildChannelInput(in string output_port, inout CConnPolicy policy)
            raises(CNoCorbaTransport,CNoSuchPortException);

      /**
       * Connect the given named port to the given remote port.
       * Use this method to connect two Orocos data flow ports.
       *
       * The local port needs to be the output, while the remote port is the
       * input. In case you only want to write a port without using this function,
       * use buildChannelOutput. For only reading a port, use buildChannelInput.
       *
       * This method combines both buildChannelOutput() and buildChannelInput() and is
       * generally better in setting up and checking a data flow connection between
       * two ports than the separate methods.
       *
       * This method will call the \a remote_ports interface back to orchestrate
       * the connection building.
       *
       * @see removeConnection() to remove this connection again.
       */
      boolean createConnection(in string local_port, in CDataFlowInterface remote_ports,
            in string remote_port, inout CConnPolicy policy)
            raises(CNoSuchPortException);

      /**
       * Removes the specified connection created with createConnection.
       */
      boolean removeConnection(in string local_port,
            in CDataFlowInterface remote_ports, in string remote_port)
            raises(CNoSuchPortException);

      /**
       * Create an out-of-band data stream with a given policy.
       * You may specify a name_id in the policy object, or if left empty,
       * a name will be chosen for you.
       */
      boolean createStream(in string local_port, inout CConnPolicy policy)
            raises(CNoSuchPortException);

      /**
       * Removes a stream added with createStream.
       * @param local_port The port to remove the stream from.
       * @param stream_name The name_id returned in the CConnPolicy object
       * after the call to createStream.
       */
      void removeStream(in string local_port, in string stream_name)
            raises(CNoSuchPortException);

      /**
       * Checks if the connection channel elements are ready for a given
       * input port.
       * This is typically called by the createConnection setup logic to see
       * if the input side agrees with the connection and can use it.
       * For example, the input port can use this opportunity to check the
       *
       * @throw CNoSuchPortException if input_port is not an input port
       * or not present in this interface.
       * @return false if the connection could not be used.
       */
	boolean channelReady(in string input_port,in CChannelElement channel, in CConnPolicy cp)
            raises(CNoSuchPortException);
    };
  };
};
#endif

